#!/bin/bash
#------------------------------------------------------------------------------
# Script:  idt-installer - IBM Cloud Developer Tools CLI installer
#------------------------------------------------------------------------------
# Bluemix Developer CLI Installer script for MacOS / Linux / Win10 systems
#------------------------------------------------------------------------------
# Copyright (c) 2017, International Business Machines. All Rights Reserved.
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
#-- Configuration settings. 
#------------------------------------------------------------------------------

VERSION="0.5"
PROG="$(basename "$0")" 
SLACK_URL="https://ibm.biz/IBMCloudNativeSlack"
GIT_URL="https://github.com/bluemix/idt-installer"

#-- External programs, format is "binary, curl package, install url"
EXT_PROGS=(
  "git,git,https://git-scm.com/downloads"
  "docker,docker,https://www.docker.com/products/overview"
  "kubectl,kubernetes-cli,url"
)

#-- Bluemix plugins to process
PLUGINS=(
  "container-registry"
  "container-service"
  "dev"
  "schematics"
  "sdk-gen"
)

#------------------------------------------------------------------------------
function help {
  cat <<-!!EOF
  
	Usage: $PROG [<action>]
  
	Where <action> is:
	  install             [Default] Perform full install of all needed CLIs and Plugins
	  uninstall           Uninstall full IBM Cloud CLI env, including 'bx', and plugins
	  -? | -h | --help    Show this help
  
	If "install" (or no argument provided), a full CLI installation will occur:
  1. Pre-req check for 'git', 'docker', and 'kubectl'
  2. Install IBM Cloud 'bx' CLI
  3. Install required plugins
	
	If "uninstall", the IBM Cloud CLI and plugins are removed from the system, including personal metadata.
  Note: Pre-req CLIs listed above are NOT uninstalled.
  
	Chat with us on Slack: $SLACK_URL
	Submit any issues to : $GIT_URL

!!EOF
}


#------------------------------------------------------------------------------
#-- ${FUNCNAME[1]} == Calling function's name
#-- Colors escape seqs
YEL='\033[1;33m'
CYN='\033[0;36m'
GRN='\033[1;32m'
RED='\033[1;31m'
NRM='\033[0m'

function log {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} $*"
}

function warn {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} ${YEL}WARN${NRM}: $*"
}

function error {
  echo -e "${CYN}[${FUNCNAME[1]}]${NRM} ${RED}ERROR${NRM}: $*"
  exit -1
}

function prompt {
  label=${1}
  default=${2}
  if [[ -z $default ]]; then
    echo -en "${label}: ${CYN}" > /dev/tty
  else
    echo -en "${label} [$default]: ${CYN}"  > /dev/tty
  fi
  read -r
  echo -e "${NRM}"  > /dev/tty
  #-- Use $REPLY to get user's input
}

function prompt_password {
  label=${1}
  echo -en "${label}: ${CYN}" > /dev/tty
  read -rs    # hide input
  echo -e "${NRM}"  > /dev/tty
  #-- Use $REPLY to get user's input
}

#------------------------------------------------------------------------------
function uninstall {
  if [[ -t 0 ]]; then   #-- are we in a terminal?
    echo
    prompt "Please confirm you want to uninstall IBM Developer Tools (y/N)?"
    if [[ "$REPLY" != [Yy]* ]]; then
      log "Uninstall aborted at user request"
      return
    fi
  fi
  warn "Starting Uninstall..."
  log "You may be prompted for 'sudo' password."

  log "Removing Bluemix CLI..."
  if [[ "${PLATFORM}" == "Darwin" && ! -z "$BREW" ]]; then
    brew cask uninstall "caskroom/cask/bluemix-cli"
  else
    sudo rm -f  /usr/local/bin/bluemix
    sudo rm -f  /usr/local/bin/bx
    sudo rm -f  /usr/local/bin/bluemix-analytics
    sudo rm -rf /usr/local/Bluemix
    #-- Taken from bluemix CLI brew uninstaller
    if [[ -f /etc/profile ]]; then
      sudo /usr/bin/sed -E -i ".bluemix_uninstall_bak" \
                        -e '/^### Added by the Bluemix CLI$/d' \
                        -e '/^source \/usr\/local\/Bluemix\/bx\/bash_autocomplete$/d' \
                        /etc/profile
    fi
    if [[ -f ~/.bashrc ]]; then
      /usr/bin/sed -E -i ".bluemix_uninstall_bak" \
                   -e '/^### Added by the Bluemix CLI$/d' \
                   -e '/^source \/usr\/local\/Bluemix\/bx\/bash_autocomplete$/d' \
                   ~/.bashrc
    fi
    if [[ -f ~/.zshrc ]]; then
      /usr/bin/sed -E -i ".bluemix_uninstall_bak" \
                   -e '/^### Added by the Bluemix CLI$/d' \
                   -e '/^source \/usr\/local\/Bluemix\/bx\/zsh_autocomplete$/d' \
                   ~/.zshrc
    fi
  fi
  env_setup remove

  rm -rf ~/.bluemix
  
  log "Uninstall finished."
}

#------------------------------------------------------------------------------
function install {
  log "Starting Full Installation..."
  install_deps
  install_bx
  plugin
  env_setup add
  log "Three aliases are defined:"
  log "  ${GRN}idt${NRM}           : Main command line tool for IBM Cloud Native development"
  log "  ${GRN}idt-update${NRM}    : Update your IDT tools to the latest version"
  log "  ${GRN}idt-uninstall${NRM} : Uninstall the IBM Developer Tools"
  log "Install finished."
}

#------------------------------------------------------------------------------
function install_deps {
  has_error=0
  for item in "${EXT_PROGS[@]}"; do
    #-- Parse array item into vars
    IFS="," read -r prog_bin prog_brew prog_url <<< "$item"
    log "Checking for external dependency: ${prog_bin}"
    if [[ -z "$(which "$prog_bin")" ]]; then
      log "${prog_bin} not found, attempting to install..."

      if [[ "${PLATFORM}" == "Darwin" && ! -z "$BREW" ]]; then
        brew install "$prog_brew"
      else
        warn "Manually install '${prog_bin}' from here: ${prog_url}"
        has_error=1
      fi
    fi
  done

  if [[ "$has_error" -eq 1 ]]; then
    error "One or more prereqs are missing. You must install these prior to using this utility"
  fi
}

#------------------------------------------------------------------------------
function install_bx {
  if [[ -z "$(which bluemix)" ]]; then
    log "Installing IBM Cloud CLI..."
    log "Finding latest version of Bluemix CLI for platform '${PLATFORM}'..."
    url="http://public.dhe.ibm.com/cloud/bluemix/cli/bluemix-cli/"
    #MacOS: Bluemix_CLI_0.4.6.pkg
    #Linux: Bluemix_CLI_0.4.6_amd64.tar.gz
    #Win:   Bluemix_CLI_0.4.6_amd64.exe
    case "$PLATFORM" in
    "Darwin") 
      if [[ "${PLATFORM}" == "Darwin" && ! -z "$BREW" ]]; then
        brew cask install "caskroom/cask/bluemix-cli"
      else
        latest=$(curl -s ${url} | grep "Bluemix_CLI_.*\.pkg" | sort | tail -1 | sed  's/^.*\(Bluemix_CLI_.*\.pkg\).*$/\1/')
        log "Pulling down instance: ${latest}"
        curl --progress-bar "${url}${latest}" > "${TMPDIR}/${latest}"
        log "Running installer on: ${latest}"
        log "You may be prompted for 'sudo' password."
        sudo installer -pkg "${TMPDIR}/${latest}" -target /
      fi
      ;;
    "Linux")  
      latest=$(curl -s ${url} | grep "Bluemix_CLI_[0-9]\.[0-9]\.[0-9]_amd64.tar.gz" | sort | tail -1 | sed  's/^.*\(Bluemix_CLI_.*_amd64\.tar\.gz\).*$/\1/')
      log "Pulling down instance: ${latest}"
      curl --progress-bar "${url}${latest}" > "${TMPDIR}/${latest}"
      log "Running installer on: ${latest}"
      log "You may be prompted for 'sudo' password."
      cd "${TMPDIR}" || exit
      tar xvfz "./${latest}"
      sudo Bluemix_CLI/install_bluemix_cli
      rm -rf Bluemix_CLI
      cd - || exit
      ;;
    "Windows") 
      latest=$(curl -s ${url} | grep "Bluemix_CLI_[0-9]\.[0-9]\.[0-9]_amd64.exe" | sort | tail -1 | sed  's/^.*\(Bluemix_CLI_.*_amd64\.exe\).*$/\1/')
      log "Pulling down instance: ${latest}"
      curl --progress-bar "${url}${latest}" > "${TMPDIR}/${latest}"
      log "Calling Windows installer..."
      "${TMPDIR}/${latest}"
      ;;
    esac
    rm -f "${TMPDIR}/${latest}" 2>/dev/null

    log "IBM Cloud CLI install finished."
  else #-- Upgrade
    log "Updating exisitng IBM Cloud CLI..."
    bx update
  fi
  log "Running 'bx --version'..."
  bx --version
}

#------------------------------------------------------------------------------
function plugin {
  log "Installaing / updating required plugins..."
  for plugin in "${PLUGINS[@]}"; do
    log "Checking status of plugin: ${plugin}"
    read -r p ver <<< "$(bx plugin list | grep "^${plugin} ")"
    if [[ -z "$p" ]]; then
      log "Installing plugin '$plugin'"
      bx plugin install -r Bluemix "$plugin"
    else
      log "Attempting to update plugin '$plugin' from version '$ver'"
      bx plugin update -r Bluemix "$plugin"
    fi
  done
  log "Running 'bx plugin list'..."
  bx plugin list
  log "Finished installing/updting plugins" 
}

#------------------------------------------------------------------------------
function env_setup {
  if [[ -f ~/.bashrc ]]; then
    case "$1" in
    "add")
      if [[ -z $(grep 'alias idt="bluemix dev"' ~/.bashrc) ]]; then
        log "Adding 'idt' aliases to: ~/.bashrc"
        cp -f ~/.bashrc ~/.bashrc.idt_install_bak || error "Add - Failed to backup file: ~/.bashrc"
        echo '#-- Added by the IDT Installer' >> ~/.bashrc
        echo 'alias idt="bluemix dev"'        >> ~/.bashrc
        echo 'alias idt-update="curl -sL https://idt-installer.mybluemix.net/ | bash"' >> ~/.bashrc
        echo 'alias idt-uninstall="curl -sL https://idt-installer.mybluemix.net/ | bash -s uninstall"' >> ~/.bashrc
      fi
    ;;
    "remove")
      if [[ -n $(grep 'alias idt="bluemix dev"' ~/.bashrc) ]]; then
        log "Removing 'idt' alias from: ~/.bashrc"
        sed -E -i ".idt_uninstall_bak" \
             -e '/^#-- Added by the IDT Installer$/d' \
             -e '/^alias idt=\"bluemix dev\"$/d' \
             -e '/^alias idt-update=\"curl -sL https://idt-installer.mybluemix.net/ | bash\"$/d' \
             -e '/^alias idt-uninstall=\"curl -sL https://idt-installer.mybluemix.net/ | bash -s uninstall\"$/d' \
             ~/.bashrc
      fi
    ;;
    *) error "Called with invalid parameter: ${1}";;
    esac
  fi
}

#------------------------------------------------------------------------------
# MAIN
#------------------------------------------------------------------------------
function main {
  log "--==[ ${GRN}${PROG}, v${VERSION}${NRM} ]==--"
  (( SECS = SECONDS ))

  TMPDIR=${TMPDIR:-"/tmp"}
  PLATFORM=$(uname)

  case "${PLATFORM}" in
  "Darwin")
    BREW="$(which brew)"
    ;;
  "Linux")  
    warn "Linux has not been well tested, so things may not work properly..."
    ;;
  "Windows") 
    warn "Windows has not been tested AT ALL! Please send all errors to author."
    ;;
  esac

  case "$1" in
  "")           install;;
  "install")    install;;
  "uninstall")  uninstall;;
  *)            help;;
  esac

  (( SECS = SECONDS - SECS ))
  log "--==[ ${GRN}Total time: ${SECS} seconds${NRM} ]==--"
}

#------------------------------------------------------------------------------
#-- Kick things off
#------------------------------------------------------------------------------
main "$@"

#------------------------------------------------------------------------------
# EOF
#------------------------------------------------------------------------------
